{
	"info": {
		"_postman_id": "59a1c506-766d-44b0-ab1c-caff04a22d46",
		"name": "swsys",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2723253"
	},
	"item": [
		{
			"name": "Get Character",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test('Disponibilidad de API', function() {\r",
							"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
							"     pm.response.to.be.withBody; // body tiene que exitir\r",
							"     pm.response.to.be.json; // además que sea un JSON válido\r",
							"});\r",
							"\r",
							"// Y comprobamos que la petición se haya servido en un determinado tiempo\r",
							"pm.test(\"Respondio en menos de 2300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2300);\r",
							"});\r",
							"\r",
							"\r",
							"var schema = {\r",
							"\t\"definitions\": {},\r",
							"\t\"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1697167388.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"count\",\r",
							"\t\t\"next\",\r",
							"\t\t\"previous\",\r",
							"\t\t\"results\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"count\": {\r",
							"\t\t\t\"$id\": \"#root/count\", \r",
							"\t\t\t\"title\": \"Count\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t82\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"next\": {\r",
							"\t\t\t\"$id\": \"#root/next\", \r",
							"\t\t\t\"title\": \"Next\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"https://swapi.dev/api/people/?page=2\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"previous\": {\r",
							"\t\t\t\"$id\": \"#root/previous\", \r",
							"\t\t\t\"title\": \"Previous\", \r",
							"\t\t\t\"type\": \"null\",\r",
							"\t\t\t\"default\": null\r",
							"\t\t},\r",
							"\t\t\"results\": {\r",
							"\t\t\t\"$id\": \"#root/results\", \r",
							"\t\t\t\"title\": \"Results\", \r",
							"\t\t\t\"type\": \"array\",\r",
							"\t\t\t\"default\": [],\r",
							"\t\t\t\"items\":{\r",
							"\t\t\t\t\"$id\": \"#root/results/items\", \r",
							"\t\t\t\t\"title\": \"Items\", \r",
							"\t\t\t\t\"type\": \"object\",\r",
							"\t\t\t\t\"required\": [\r",
							"\t\t\t\t\t\"name\",\r",
							"\t\t\t\t\t\"height\",\r",
							"\t\t\t\t\t\"mass\",\r",
							"\t\t\t\t\t\"hair_color\",\r",
							"\t\t\t\t\t\"skin_color\",\r",
							"\t\t\t\t\t\"eye_color\",\r",
							"\t\t\t\t\t\"birth_year\",\r",
							"\t\t\t\t\t\"gender\",\r",
							"\t\t\t\t\t\"homeworld\",\r",
							"\t\t\t\t\t\"films\",\r",
							"\t\t\t\t\t\"species\",\r",
							"\t\t\t\t\t\"vehicles\",\r",
							"\t\t\t\t\t\"starships\",\r",
							"\t\t\t\t\t\"created\",\r",
							"\t\t\t\t\t\"edited\",\r",
							"\t\t\t\t\t\"url\"\r",
							"\t\t\t\t],\r",
							"\t\t\t\t\"properties\": {\r",
							"\t\t\t\t\t\"name\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/name\", \r",
							"\t\t\t\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"Luke Skywalker\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"height\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/height\", \r",
							"\t\t\t\t\t\t\"title\": \"Height\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"172\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"mass\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/mass\", \r",
							"\t\t\t\t\t\t\"title\": \"Mass\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"77\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"hair_color\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/hair_color\", \r",
							"\t\t\t\t\t\t\"title\": \"Hair_color\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"blond\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"skin_color\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/skin_color\", \r",
							"\t\t\t\t\t\t\"title\": \"Skin_color\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"fair\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"eye_color\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/eye_color\", \r",
							"\t\t\t\t\t\t\"title\": \"Eye_color\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"blue\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"birth_year\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/birth_year\", \r",
							"\t\t\t\t\t\t\"title\": \"Birth_year\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"19BBY\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"gender\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/gender\", \r",
							"\t\t\t\t\t\t\"title\": \"Gender\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"male\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"homeworld\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/homeworld\", \r",
							"\t\t\t\t\t\t\"title\": \"Homeworld\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"https://swapi.dev/api/planets/1/\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"films\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/films\", \r",
							"\t\t\t\t\t\t\"title\": \"Films\", \r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"default\": [],\r",
							"\t\t\t\t\t\t\"items\":{\r",
							"\t\t\t\t\t\t\t\"$id\": \"#root/results/items/films/items\", \r",
							"\t\t\t\t\t\t\t\"title\": \"Items\", \r",
							"\t\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\t\"https://swapi.dev/api/films/1/\"\r",
							"\t\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t\t}\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"species\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/species\", \r",
							"\t\t\t\t\t\t\"title\": \"Species\", \r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"vehicles\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/vehicles\", \r",
							"\t\t\t\t\t\t\"title\": \"Vehicles\", \r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"default\": [],\r",
							"\t\t\t\t\t\t\"items\":{\r",
							"\t\t\t\t\t\t\t\"$id\": \"#root/results/items/vehicles/items\", \r",
							"\t\t\t\t\t\t\t\"title\": \"Items\", \r",
							"\t\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\t\"https://swapi.dev/api/vehicles/14/\"\r",
							"\t\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t\t}\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"starships\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/starships\", \r",
							"\t\t\t\t\t\t\"title\": \"Starships\", \r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"default\": [],\r",
							"\t\t\t\t\t\t\"items\":{\r",
							"\t\t\t\t\t\t\t\"$id\": \"#root/results/items/starships/items\", \r",
							"\t\t\t\t\t\t\t\"title\": \"Items\", \r",
							"\t\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\t\"https://swapi.dev/api/starships/12/\"\r",
							"\t\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t\t}\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"created\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/created\", \r",
							"\t\t\t\t\t\t\"title\": \"Created\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"2014-12-09T13:50:51.644000Z\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"edited\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/edited\", \r",
							"\t\t\t\t\t\t\"title\": \"Edited\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"2014-12-20T21:17:56.891000Z\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t},\r",
							"\t\t\t\t\t\"url\": {\r",
							"\t\t\t\t\t\t\"$id\": \"#root/results/items/url\", \r",
							"\t\t\t\t\t\t\"title\": \"Url\", \r",
							"\t\t\t\t\t\t\"type\": \"string\",\r",
							"\t\t\t\t\t\t\"default\": \"\",\r",
							"\t\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t\t\"https://swapi.dev/api/people/1/\"\r",
							"\t\t\t\t\t\t],\r",
							"\t\t\t\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t\t\t\t}\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"pm.test('Esquema Valido', () => {\r",
							"  pm.response.to.have.jsonSchema (schema);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"verifica las 2 primeras salidas\", function() {\r",
							"  pm.expect(jsonData.count).to.equal(82)\r",
							"  pm.expect(jsonData.next).to.equal(\"https://swapi.dev/api/people/?page=2\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{protocol}}://{{host}}/rec/v1/api/sys/{{value}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"rec",
						"v1",
						"api",
						"sys",
						"{{value}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get healt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de respuesta: 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Respondio en menos de 10000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"\r",
							"var responseData = JSON.parse(responseBody);\r",
							"tests[\"Respuesta OK\"] = true\r",
							"\r",
							"var schema = {\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\", \r",
							"\t\"$id\": \"https://example.com/object1697167388.json\", \r",
							"\t\"title\": \"Root\", \r",
							"\t\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"server\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"host\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"ip\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"timestamp\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"host\",\r",
							"        \"ip\",\r",
							"        \"timestamp\"\r",
							"      ]\r",
							"    },\r",
							"    \"backends\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"typeApi\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"status\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"typeApi\",\r",
							"            \"name\",\r",
							"            \"status\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"typeApi\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"status\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"typeApi\",\r",
							"            \"name\",\r",
							"            \"status\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"typeApi\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"status\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"typeApi\",\r",
							"            \"name\",\r",
							"            \"status\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"dependencies\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"typeDependencies\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"status\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"typeDependencies\",\r",
							"            \"name\",\r",
							"            \"status\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"typeDependencies\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"status\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"typeDependencies\",\r",
							"            \"name\",\r",
							"            \"status\"\r",
							"          ]\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"typeDependencies\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"name\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"status\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"typeDependencies\",\r",
							"            \"name\",\r",
							"            \"status\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"status\",\r",
							"    \"name\",\r",
							"    \"server\",\r",
							"    \"backends\",\r",
							"    \"dependencies\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('Esquema Valido', () => {\r",
							"  pm.response.to.have.jsonSchema (schema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/rec/v1/api/sys/{{valuehealth}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"rec",
						"v1",
						"api",
						"sys",
						"{{valuehealth}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get character 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de respuesta: 404\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(404);\r",
							"});\r",
							"\r",
							"var responseData = JSON.parse(responseBody);\r",
							"tests[\"Respuesta OK\"] = true\r",
							"\r",
							"pm.test(\"Respondio en menos de 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Esquema Valido\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        error: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      error_description: {\r",
							"        type: \"string\"\r",
							"      }\r",
							"    },\r",
							"    required: [\"error_description\"],\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/rec/v1/api/sys/{{valueInvalid}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"rec",
						"v1",
						"api",
						"sys",
						"{{valueInvalid}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var authServiceUrl = pm.variables.get('autorizacionUrl');\r",
					"var client_id = pm.variables.get('clientId');\r",
					"var client_secret = pm.variables.get('clientSecret');\r",
					"var scope = pm.variables.get('scope');\r",
					"\r",
					"const postRequest = {\r",
					"  url: authServiceUrl,\r",
					"  method: 'POST',\r",
					"  timeout: 0,\r",
					"  header: [\r",
					"\t\t\t{\r",
					"\t\t\t\t\"key\": \"Content-Type\",\r",
					"\t\t\t\t\"value\": \"application/x-www-form-urlencoded\",\r",
					"\t\t\t\t\"type\": \"text\"\r",
					"\t\t\t},\r",
					"\t\t\t{\r",
					"\t\t\t\t\"key\": \"X-Coppel-Date-Request\",\r",
					"\t\t\t\t\"value\": \"2024-03-27T21:44:21.219Z\",\r",
					"\t\t\t\t\"type\": \"text\"\r",
					"\t\t\t},\r",
					"\t\t\t{\r",
					"\t\t\t\t\"key\": \"X-Coppel-Latitude\",\r",
					"\t\t\t\t\"value\": \"20.270460\",\r",
					"\t\t\t\t\"type\": \"text\"\r",
					"\t\t\t},\r",
					"\t\t\t{\r",
					"\t\t\t\t\"key\": \"X-Coppel-Longitude\",\r",
					"\t\t\t\t\"value\": \"-99.985171\",\r",
					"\t\t\t\t\"type\": \"text\"\r",
					"\t\t\t},\r",
					"\t\t\t{\r",
					"\t\t\t\t\"key\": \"X-Coppel-TransactionId\",\r",
					"\t\t\t\t\"value\": \"fs9999c7q86c33cdfd5f55\",\r",
					"\t\t\t\t\"type\": \"text\"\r",
					"\t\t\t}\r",
					"\t\t],\r",
					"  body: {\r",
					"    mode: 'urlencoded',\r",
					"    urlencoded: [\r",
					"        {\r",
					"            key:\"grant_type\", \r",
					"            value:\"client_credentials\",\r",
					"            type:\"text\"\r",
					"        },\r",
					"        {\r",
					"            key:\"client_id\", \r",
					"            value:client_id,\r",
					"            type:\"text\"\r",
					"        },\r",
					"        {\r",
					"            key:\"client_secret\", \r",
					"            value:client_secret,\r",
					"            type:\"text\"\r",
					"        },\r",
					"        {\r",
					"            key:\"scope\", \r",
					"            value:scope,\r",
					"            type:\"text\"\r",
					"        }\r",
					"    ]}\r",
					"};\r",
					"pm.sendRequest(postRequest, function (err, res) {\r",
					"    var responseJson = res.json();\r",
					"    console.log(responseJson);\r",
					"    pm.environment.set('token', responseJson['access_token']);\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}